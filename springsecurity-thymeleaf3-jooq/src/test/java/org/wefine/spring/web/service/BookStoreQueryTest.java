package org.wefine.spring.web.service;

import org.jooq.DSLContext;
import org.jooq.Record3;
import org.jooq.Result;
import org.junit.Test;
import org.wefine.spring.AbstractSpringTest;
import org.wefine.spring.jooq.tables.Author;
import org.wefine.spring.jooq.tables.Book;
import org.wefine.spring.jooq.tables.BookStore;
import org.wefine.spring.jooq.tables.BookToBookStore;
import org.wefine.spring.jooq.tables.records.BookRecord;

import javax.annotation.Resource;

import static java.util.Arrays.asList;
import static org.jooq.impl.DSL.countDistinct;
import static org.junit.Assert.assertEquals;
import static org.wefine.spring.jooq.tables.Author.AUTHOR;
import static org.wefine.spring.jooq.tables.Book.BOOK;
import static org.wefine.spring.jooq.tables.BookStore.BOOK_STORE;
import static org.wefine.spring.jooq.tables.BookToBookStore.BOOK_TO_BOOK_STORE;

public class BookStoreQueryTest extends AbstractSpringTest {
    @Resource
    private DSLContext dsl;

    @Test
    public void testJoin() throws Exception {
        // All of these tables were generated by jOOQ's Maven plugin
        Book b = BOOK.as("b");
        Author a = AUTHOR.as("a");
        BookStore s = BOOK_STORE.as("s");
        BookToBookStore t = BOOK_TO_BOOK_STORE.as("t");

        Result<Record3<String, String, Integer>> result =
                dsl.select(a.FIRST_NAME, a.LAST_NAME, countDistinct(s.NAME))
                        .from(a)
                        .join(b).on(b.AUTHOR_ID.equal(a.ID))
                        .join(t).on(t.BOOK_ID.equal(b.ID))
                        .join(s).on(t.BOOK_STORE_NAME.equal(s.NAME))
                        .groupBy(a.FIRST_NAME, a.LAST_NAME)
                        .orderBy(countDistinct(s.NAME).desc())
                        .fetch();

        assertEquals(2, result.size());
        assertEquals("Paulo", result.getValue(0, a.FIRST_NAME));
        assertEquals("George", result.getValue(1, a.FIRST_NAME));

        assertEquals("Coelho", result.getValue(0, a.LAST_NAME));
        assertEquals("Orwell", result.getValue(1, a.LAST_NAME));

        assertEquals(Integer.valueOf(3), result.getValue(0, countDistinct(s.NAME)));
        assertEquals(Integer.valueOf(2), result.getValue(1, countDistinct(s.NAME)));
    }

    @Test
    public void testActiveRecords() throws Exception {
        Result<BookRecord> result = dsl.selectFrom(BOOK).orderBy(BOOK.ID).fetch();

        assertEquals(4, result.size());
        assertEquals(asList(1, 2, 3, 4), result.getValues(0));
    }
}
